{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rokis\\\\OneDrive\\\\Stalinis kompiuteris\\\\TSR\\\\typeapp\\\\src\\\\components\\\\About1.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { fetchQuizQuestions, fetchMyQuestions } from './API'; // Components\n\nimport QuestionCard from './QuestionCard'; //\n//Types\n\nimport { Difficulty } from './API';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TOTAL_QUESTIONS = 10;\nfetchMyQuestions(1, Difficulty.EASY);\n\nconst About = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  console.log(questions);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY); //const newQuestions = fetchMyQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = e => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n      if (correct) setScore(prev => prev + 1);\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      };\n      setUserAnswers(prev => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else setNumber(nextQuestion);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quizPage\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quizCard\",\n      children: [gameOver ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"quizCardButton\",\n        onClick: startTrivia,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 10\n      }, this) : null, userAnswers.length === TOTAL_QUESTIONS ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"quizCardButton\",\n        onClick: startTrivia,\n        children: \"Start over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 10\n      }, this) : null, !gameOver ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"score\",\n        children: [\"Score: \", score, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 22\n      }, this) : null, loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading questions ...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 22\n      }, this), !loading && !gameOver && /*#__PURE__*/_jsxDEV(QuestionCard, {\n        questionNumber: number + 1,\n        totalQuestions: TOTAL_QUESTIONS,\n        question: questions[number].question,\n        answers: questions[number].answers,\n        userAnswer: userAnswers ? userAnswers[number] : undefined,\n        callback: checkAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 10\n      }, this), !gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"quizCardButton\",\n        onClick: nextQuestion,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 12\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 8\n  }, this);\n};\n\n_s(About, \"3vxO9CiM0ITniaGpI+eu+AjXM9U=\");\n\n_c = About;\nexport default About;\n\nvar _c;\n\n$RefreshReg$(_c, \"About\");","map":{"version":3,"sources":["C:/Users/rokis/OneDrive/Stalinis kompiuteris/TSR/typeapp/src/components/About1.tsx"],"names":["React","useState","fetchQuizQuestions","fetchMyQuestions","QuestionCard","Difficulty","TOTAL_QUESTIONS","EASY","About","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","console","log","startTrivia","newQuestions","checkAnswer","e","answer","currentTarget","value","correct","correct_answer","prev","answerObject","question","correctAnswer","nextQuestion","length","answers","undefined"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport { fetchQuizQuestions, QuestionState, fetchMyQuestions } from './API';\r\n// Components\r\nimport QuestionCard from './QuestionCard';\r\n//\r\n//Types\r\nimport {Difficulty} from './API';\r\nimport { Prev } from 'react-bootstrap/esm/PageItem';\r\n//\r\n\r\nexport type AnswerObject = {\r\n  question:string;\r\n  answer:string;\r\n  correct:boolean;\r\n  correctAnswer:string;\r\n}\r\n\r\nconst TOTAL_QUESTIONS = 10;\r\nfetchMyQuestions(1, Difficulty.EASY);\r\nconst About = () => {\r\nconst[loading, setLoading] = useState(false);\r\nconst[questions, setQuestions] = useState<QuestionState[]>([]);\r\nconst[number, setNumber] = useState(0);\r\nconst[userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\r\nconst[score, setScore] = useState(0);\r\nconst[gameOver, setGameOver] = useState(true);\r\n\r\nconsole.log(questions);\r\n\r\nconst startTrivia = async () =>{\r\n  setLoading(true);\r\n  setGameOver(false);\r\n\r\n  const newQuestions = await fetchQuizQuestions(\r\n    TOTAL_QUESTIONS, Difficulty.EASY\r\n  );\r\n  //const newQuestions = fetchMyQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\r\n  setQuestions(newQuestions);\r\n  setScore(0);\r\n  setUserAnswers([]);\r\n  setNumber(0);\r\n  setLoading(false);\r\n};\r\nconst checkAnswer = (e:React.MouseEvent<HTMLButtonElement>) =>{\r\n  if (!gameOver){\r\n    const answer = e.currentTarget.value;\r\n    const correct =  questions[number].correct_answer === answer;\r\n    if (correct) setScore(prev=> prev+1);\r\n    const answerObject = {\r\n      question:questions[number].question,\r\n      answer, \r\n      correct,\r\n      correctAnswer:questions[number].correct_answer,\r\n    }\r\n    setUserAnswers(prev=>[...prev, answerObject]);\r\n  }\r\n};\r\nconst nextQuestion = ()=>{\r\n  const nextQuestion = number+1;\r\n  if (nextQuestion === TOTAL_QUESTIONS){\r\n    setGameOver(true);\r\n  }\r\n  else setNumber(nextQuestion);\r\n};\r\n\r\n\r\n    return (\r\n       <div className=\"quizPage\">    \r\n         <div className=\"quizCard\">\r\n         {gameOver ?(\r\n         <button className=\"quizCardButton\" onClick={startTrivia}>Start</button>\r\n         ) : null}\r\n         {userAnswers.length === TOTAL_QUESTIONS ?(\r\n         <button className=\"quizCardButton\" onClick={startTrivia}>Start over</button>\r\n         ) : null}\r\n         \r\n         {!gameOver ?<p className=\"score\">Score: {score} </p> : null}\r\n         {loading && <p>Loading questions ...</p>}\r\n        {!loading && !gameOver && (\r\n         <QuestionCard\r\n         questionNumber = {number +1}\r\n         totalQuestions = {TOTAL_QUESTIONS}\r\n         question = {questions[number].question}\r\n         answers = {questions[number].answers}\r\n         userAnswer = {userAnswers?  userAnswers[number] :  undefined}\r\n         callback = {checkAnswer}\r\n         \r\n         />\r\n        )}\r\n        {!gameOver && !loading && userAnswers.length === number+1 && number !== TOTAL_QUESTIONS-1 ?(\r\n           <button className=\"quizCardButton\" onClick={nextQuestion}>Next</button>\r\n        ):null }\r\n        </div>\r\n       </div>\r\n    );\r\n}\r\n \r\nexport default About;"]},"metadata":{},"sourceType":"module"}