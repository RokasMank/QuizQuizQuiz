{"ast":null,"code":"import { ShuffleArray } from \"./utils\";\nexport let Difficulty;\n\n(function (Difficulty) {\n  Difficulty[\"EASY\"] = \"easy\";\n  Difficulty[\"MEDIUM\"] = \"medium\";\n  Difficulty[\"HARD\"] = \"hard\";\n})(Difficulty || (Difficulty = {}));\n\nexport const fetchQuizQuestions = async (amount, difficulty) => {\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n  const data = await (await fetch(endpoint)).json();\n  return data.results.map(question => ({ ...question,\n    answers: ShuffleArray([...question.incorrectAnswers, question.correctAnswer])\n  }));\n};","map":{"version":3,"sources":["C:/Users/rokis/OneDrive/Stalinis kompiuteris/TSR/typeapp/src/components/API.ts"],"names":["ShuffleArray","Difficulty","fetchQuizQuestions","amount","difficulty","endpoint","data","fetch","json","results","map","question","answers","incorrectAnswers","correctAnswer"],"mappings":"AACA,SAAQA,YAAR,QAA2B,SAA3B;AAaA,WAAYC,UAAZ;;WAAYA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,KAAAA,U;;AAMZ,OAAO,MAAMC,kBAAkB,GAAG,OAAMC,MAAN,EAAqBC,UAArB,KAA8C;AAC5E,QAAMC,QAAQ,GAAI,sCAAqCF,MAAO,eAAcC,UAAW,gBAAvF;AACA,QAAME,IAAI,GAAI,MAAK,CAAC,MAAMC,KAAK,CAACF,QAAD,CAAZ,EAAwBG,IAAxB,EAAnB;AACA,SAAOF,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAkBC,QAAD,KACpB,EACI,GAAGA,QADP;AAEIC,IAAAA,OAAO,EAAEZ,YAAY,CAAC,CAAC,GAAGW,QAAQ,CAACE,gBAAb,EAA+BF,QAAQ,CAACG,aAAxC,CAAD;AAFzB,GADoB,CAAjB,CAAP;AAOH,CAVM","sourcesContent":["import { type } from \"os\";\r\nimport {ShuffleArray} from \"./utils\";\r\n\r\nexport type Question = {\r\n    category:string;\r\n    correctAnswer: string;\r\n    difficulty:string;\r\n    incorrectAnswers:string[];\r\n    question:string;\r\n    type:string;\r\n}\r\n\r\nexport type QuestionState = Question & {answers:string[]};\r\n\r\nexport enum Difficulty{\r\nEASY = \"easy\",\r\nMEDIUM = \"medium\",\r\nHARD = \"hard\",\r\n}\r\n\r\nexport const fetchQuizQuestions = async(amount:number, difficulty:Difficulty) =>{\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n    const data =  await(await fetch(endpoint)).json();\r\n    return data.results.map((question:Question)=>(\r\n        {\r\n            ...question,\r\n            answers: ShuffleArray([...question.incorrectAnswers, question.correctAnswer]),\r\n        }\r\n    )\r\n    );\r\n};"]},"metadata":{},"sourceType":"module"}