[{"C:\\Users\\rokis\\OneDrive\\Stalinis kompiuteris\\TSR\\typeapp\\src\\index.tsx":"1","C:\\Users\\rokis\\OneDrive\\Stalinis kompiuteris\\TSR\\typeapp\\src\\App.tsx":"2","C:\\Users\\rokis\\OneDrive\\Stalinis kompiuteris\\TSR\\typeapp\\src\\components\\Error.jsx":"3","C:\\Users\\rokis\\OneDrive\\Stalinis kompiuteris\\TSR\\typeapp\\src\\components\\Home.jsx":"4","C:\\Users\\rokis\\OneDrive\\Stalinis kompiuteris\\TSR\\typeapp\\src\\components\\Navigation.jsx":"5","C:\\Users\\rokis\\OneDrive\\Stalinis kompiuteris\\TSR\\typeapp\\src\\components\\About1.tsx":"6","C:\\Users\\rokis\\OneDrive\\Stalinis kompiuteris\\TSR\\typeapp\\src\\components\\QuestionCard.tsx":"7","C:\\Users\\rokis\\OneDrive\\Stalinis kompiuteris\\TSR\\typeapp\\src\\components\\API.ts":"8","C:\\Users\\rokis\\OneDrive\\Stalinis kompiuteris\\TSR\\typeapp\\src\\components\\utils.ts":"9","C:\\Users\\rokis\\OneDrive\\Stalinis kompiuteris\\TSR\\typeapp\\src\\components\\Prize.tsx":"10"},{"size":148,"mtime":1614777368853,"results":"11","hashOfConfig":"12"},{"size":1613,"mtime":1614869094611,"results":"13","hashOfConfig":"12"},{"size":178,"mtime":1614809803237,"results":"14","hashOfConfig":"12"},{"size":551,"mtime":1614869116805,"results":"15","hashOfConfig":"12"},{"size":413,"mtime":1614869202021,"results":"16","hashOfConfig":"12"},{"size":3374,"mtime":1614941104072,"results":"17","hashOfConfig":"12"},{"size":1012,"mtime":1614867997532,"results":"18","hashOfConfig":"12"},{"size":1288,"mtime":1614863074268,"results":"19","hashOfConfig":"12"},{"size":84,"mtime":1614777135722,"results":"20","hashOfConfig":"12"},{"size":258,"mtime":1614893759891,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1btdawg",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},"C:\\Users\\rokis\\OneDrive\\Stalinis kompiuteris\\TSR\\typeapp\\src\\index.tsx",[],["48","49"],"C:\\Users\\rokis\\OneDrive\\Stalinis kompiuteris\\TSR\\typeapp\\src\\App.tsx",[],"C:\\Users\\rokis\\OneDrive\\Stalinis kompiuteris\\TSR\\typeapp\\src\\components\\Error.jsx",[],["50","51"],"C:\\Users\\rokis\\OneDrive\\Stalinis kompiuteris\\TSR\\typeapp\\src\\components\\Home.jsx",[],"C:\\Users\\rokis\\OneDrive\\Stalinis kompiuteris\\TSR\\typeapp\\src\\components\\Navigation.jsx",[],"C:\\Users\\rokis\\OneDrive\\Stalinis kompiuteris\\TSR\\typeapp\\src\\components\\About1.tsx",["52"],"import React, {useState} from 'react';\r\nimport { fetchQuizQuestions, QuestionState, fetchMyQuestions } from './API';\r\n// Components\r\nimport QuestionCard from './QuestionCard';\r\n//\r\n//Types\r\nimport {Difficulty} from './API';\r\n\r\n//\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport type AnswerObject = {\r\n  question:string;\r\n  answer:string;\r\n  correct:boolean;\r\n  correctAnswer:string;\r\n}\r\n\r\nconst TOTAL_QUESTIONS = 10;\r\nconst About = () => {\r\nconst[loading, setLoading] = useState(false);\r\nconst[questions, setQuestions] = useState<QuestionState[]>([]);\r\nconst[number, setNumber] = useState(0);\r\nconst[userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\r\nconst[score, setScore] = useState(0);\r\nconst[gameOver, setGameOver] = useState(true);\r\n\r\nconsole.log(questions);\r\n\r\nconst startTrivia = async () =>{\r\n  setLoading(true);\r\n  setGameOver(false);\r\n\r\n  // const newQuestions = await fetchQuizQuestions(\r\n  //   TOTAL_QUESTIONS, Difficulty.EASY\r\n  // );\r\n  const newQuestions = await fetchMyQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\r\n  setQuestions(newQuestions);\r\n  setScore(0);\r\n  setUserAnswers([]);\r\n  setNumber(0);\r\n  setLoading(false);\r\n};\r\nconst checkAnswer = (e:React.MouseEvent<HTMLButtonElement>) =>{\r\n  if (!gameOver){\r\n    const answer = e.currentTarget.value;\r\n    const correct =  questions[number].correct_answer === answer;\r\n  \r\n    \r\n    if (correct) {setScore(prev=> prev+1); e.currentTarget.className = \"correctAnswer\"}\r\n     else if (!correct){e.currentTarget.className = \"incorrectAnswer\"}\r\n\r\n    const answerObject = {\r\n      question:questions[number].question,\r\n      answer, \r\n      correct,\r\n      correctAnswer:questions[number].correct_answer,\r\n    }\r\n    setUserAnswers(prev=>[...prev, answerObject]);\r\n  }\r\n};\r\nconst nextQuestion = ()=>{\r\n  const nextQuestion = number+1;\r\n  if (nextQuestion === TOTAL_QUESTIONS){\r\n    setGameOver(true);\r\n  }\r\n  else setNumber(nextQuestion);\r\n};\r\n\r\n\r\n    return (\r\n       <div className=\"quizPage\">\r\n         <div className=\"header\"><h1>Get to know me!</h1> </div> \r\n         <div className=\"wrapper\"> \r\n         <div className=\"quizCard\">\r\n         {gameOver ?(\r\n         <button className=\"quizCardButton\" onClick={startTrivia}>Start</button>\r\n         ) : null}\r\n         {userAnswers.length === TOTAL_QUESTIONS ?(\r\n         <button className=\"quizCardButton\" onClick={startTrivia}>Start over</button>  \r\n        \r\n         ) : null }\r\n          {userAnswers.length === TOTAL_QUESTIONS ?(\r\n         <NavLink className=\"navL\" to=\"/prize\">Claim prize</NavLink> \r\n        \r\n         ) : null }\r\n\r\n         {!gameOver ?<p className=\"score\">Score: {score} </p> : null}\r\n         {loading && <p>Loading questions ...</p>}\r\n        {!loading && !gameOver && (\r\n         <QuestionCard\r\n         questionNumber = {number +1}\r\n         totalQuestions = {TOTAL_QUESTIONS}\r\n         question = {questions[number].question}\r\n         answers = {questions[number].answers}\r\n         userAnswer = {userAnswers?  userAnswers[number] :  undefined}\r\n         callback = {checkAnswer}\r\n         \r\n         />\r\n        )}\r\n        {!gameOver && !loading && userAnswers.length === number+1 && number !== TOTAL_QUESTIONS-1 ?(\r\n           <button className=\"quizCardButton\" onClick={nextQuestion}>Next</button>\r\n        ):null }\r\n        </div>  \r\n        </div>\r\n       </div>\r\n    );\r\n}\r\n \r\nexport default About;","C:\\Users\\rokis\\OneDrive\\Stalinis kompiuteris\\TSR\\typeapp\\src\\components\\QuestionCard.tsx",["53"],"import React from 'react';\r\nimport {AnswerObject} from \"./About1\";\r\ntype Props = {\r\nquestion :string;\r\nanswers :string[];\r\ncallback:(e:React.MouseEvent<HTMLButtonElement>) =>void;\r\nuserAnswer:any;\r\nquestionNumber:number;\r\ntotalQuestions:number;\r\n}\r\nconst QuestionCard: React.FC<Props> = ({question, answers, callback, userAnswer, questionNumber, totalQuestions}) =>\r\n    (\r\n\r\n    <div>\r\n        <p className=\"number\">\r\n            Question : {questionNumber} / {totalQuestions}\r\n        </p>\r\n        <p dangerouslySetInnerHTML={{__html: question}}/>\r\n        <div>\r\n            {answers.map(answer =>(\r\n                \r\n                <div key={answer}>\r\n                    \r\n                    <button  className=\"quizCardButton\" disabled ={!!userAnswer} value={answer} onClick={callback}>\r\n                        <span dangerouslySetInnerHTML = {{__html:answer}}/>\r\n                    </button>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    </div>\r\n);\r\n\r\n\r\n\r\nexport default QuestionCard;","C:\\Users\\rokis\\OneDrive\\Stalinis kompiuteris\\TSR\\typeapp\\src\\components\\API.ts",["54","55"],"import { type } from \"os\";\r\nimport { shuffleArray } from \"./utils\";\r\nimport data from '../data.json';\r\nimport QuestionCard from \"./QuestionCard\";\r\n\r\nexport const  fetchMyQuestions = async(amount:number, difficulty:Difficulty) =>{\r\n    \r\n    return data.questions.map((question:Question)=>({\r\n        ...question,\r\n        \r\n        answers: shuffleArray([...question.incorrect_answers, question.correct_answer]),\r\n    }\r\n    ));\r\n            \r\n};\r\n\r\nexport type Question = {\r\n    category:string;\r\n    correct_answer: string;\r\n    difficulty:string;\r\n    incorrect_answers:string[];\r\n    question:string;\r\n    type:string;\r\n};\r\n\r\nexport type QuestionState = Question & {answers:string[]};\r\n\r\nexport enum Difficulty{\r\nEASY = \"easy\",\r\nMEDIUM = \"medium\",\r\nHARD = \"hard\",\r\n}\r\nexport const fetchQuizQuestions = async(amount:number, difficulty:Difficulty) =>{\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n    const data =  await(await fetch(endpoint)).json();\r\n    //console.log(data); \r\n     return data.results.map((question: Question)=>(\r\n         {\r\n             ...question,\r\n         \r\n           \r\n             answers: shuffleArray([...question.incorrect_answers, question.correct_answer]),\r\n         }\r\n     ));\r\n   \r\n};","C:\\Users\\rokis\\OneDrive\\Stalinis kompiuteris\\TSR\\typeapp\\src\\components\\utils.ts",[],"C:\\Users\\rokis\\OneDrive\\Stalinis kompiuteris\\TSR\\typeapp\\src\\components\\Prize.tsx",["56"],"import react from \"react\"\r\nimport image from \"./e2a.jpg\"\r\nconst prize =()=>{\r\n  return (\r\n    <div className=\"prizePage\">\r\n      <div className=\"sikeImage\">\r\n      <img src={image} alt=\"sike\" ></img>\r\n      </div>\r\n      </div>\r\n  )\r\n}\r\nexport default prize;",{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":2,"column":10,"nodeType":"63","messageId":"64","endLine":2,"endColumn":28},{"ruleId":"61","severity":1,"message":"65","line":2,"column":9,"nodeType":"63","messageId":"64","endLine":2,"endColumn":21},{"ruleId":"61","severity":1,"message":"66","line":1,"column":10,"nodeType":"63","messageId":"64","endLine":1,"endColumn":14},{"ruleId":"61","severity":1,"message":"67","line":4,"column":8,"nodeType":"63","messageId":"64","endLine":4,"endColumn":20},{"ruleId":"61","severity":1,"message":"68","line":1,"column":8,"nodeType":"63","messageId":"64","endLine":1,"endColumn":13},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"@typescript-eslint/no-unused-vars","'fetchQuizQuestions' is defined but never used.","Identifier","unusedVar","'AnswerObject' is defined but never used.","'type' is defined but never used.","'QuestionCard' is defined but never used.","'react' is defined but never used.","no-global-assign","no-unsafe-negation"]